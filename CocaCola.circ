<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(130,280)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(130,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(130,340)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(140,370)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(150,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(670,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(670,260)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(670,300)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(680,340)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="5" loc="(220,230)" name="Button"/>
    <comp loc="(540,230)" name="COCACOAL">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(130,280)" to="(310,280)"/>
    <wire from="(130,310)" to="(160,310)"/>
    <wire from="(130,340)" to="(210,340)"/>
    <wire from="(140,370)" to="(190,370)"/>
    <wire from="(150,250)" to="(320,250)"/>
    <wire from="(160,300)" to="(160,310)"/>
    <wire from="(160,300)" to="(320,300)"/>
    <wire from="(190,360)" to="(190,370)"/>
    <wire from="(190,360)" to="(300,360)"/>
    <wire from="(210,320)" to="(210,340)"/>
    <wire from="(210,320)" to="(270,320)"/>
    <wire from="(220,230)" to="(320,230)"/>
    <wire from="(270,310)" to="(270,320)"/>
    <wire from="(270,310)" to="(320,310)"/>
    <wire from="(300,330)" to="(300,360)"/>
    <wire from="(300,330)" to="(320,330)"/>
    <wire from="(310,270)" to="(310,280)"/>
    <wire from="(310,270)" to="(320,270)"/>
    <wire from="(320,230)" to="(330,230)"/>
    <wire from="(320,270)" to="(330,270)"/>
    <wire from="(320,290)" to="(320,300)"/>
    <wire from="(320,310)" to="(330,310)"/>
    <wire from="(320,330)" to="(330,330)"/>
    <wire from="(530,270)" to="(540,270)"/>
    <wire from="(540,230)" to="(670,230)"/>
    <wire from="(540,250)" to="(650,250)"/>
    <wire from="(540,270)" to="(580,270)"/>
    <wire from="(540,290)" to="(570,290)"/>
    <wire from="(570,290)" to="(570,340)"/>
    <wire from="(570,340)" to="(680,340)"/>
    <wire from="(580,260)" to="(580,270)"/>
    <wire from="(580,260)" to="(600,260)"/>
    <wire from="(600,260)" to="(600,300)"/>
    <wire from="(600,300)" to="(670,300)"/>
    <wire from="(650,250)" to="(650,260)"/>
    <wire from="(650,260)" to="(670,260)"/>
    <wire from="(670,260)" to="(680,260)"/>
  </circuit>
  <vhdl name="COCACOAL">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

&#13;
ENTITY COCACOAL IS&#13;
  PORT (&#13;
   clk: in std_logic;
    reset: in std_logic;
    F0: in std_logic; -- fotocelula pentru moneda de 5 bani
    F1: in std_logic; -- fotocelula pentru moneda de 10 bani
    F2: in std_logic; -- fotocelula pentru moneda de 50 bani
    F3: in std_logic; -- fotocelula pentru respingere moneda/corpuri straine
    F4: out std_logic; -- semnal de acceptare a monedei
    AM: out std_logic; -- semnal de acceptare a monezilor
    AT: out std_logic; -- semnal de total
    Coke: out std_logic -- semnal de eliberare Coca Cola
    );&#13;
END COCACOAL;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF COCACOAL IS&#13;
&#13;
 -- Definim starea sistemului
  type state is (S0, S1, S2, S3);
  signal current_state, next_state: state;

  -- Definim variabilele necesare pentru calcularea totalului si pretului
  signal total: unsigned(7 downto 0) := (others =&gt; '0');
  constant price: unsigned(7 downto 0) := "00000001"; -- pretul este de 1 leu sau 100 de bani


BEGIN&#13;
&#13;  process (clk, reset)
begin
    if reset = '1' then
      current_state &lt;= S0; -- stare initiala
      total &lt;= (others =&gt; '0'); -- resetam totalul
      F4 &lt;= '0'; -- resetam semnalul de acceptare a monedei
      AM &lt;= '0'; -- resetam semnalul de acceptare a monezilor
      AT &lt;= '0'; -- resetam semnalul de total
      Coke &lt;= '0'; -- resetam semnalul de eliberare Coca Cola
   
    elsif rising_edge(clk) then
      current_state &lt;= next_state;
    end if;
  end process;

   -- Definim conditiile de tranzitie intre starile sistemului
  process (current_state, F0, F1, F2, F3)
  begin
    case current_state is
    
      when S0 =&gt;
        if F0 = '1' then
          next_state &lt;= S1;
          F4 &lt;= '1'; -- semnal de acceptare a monedei
          total &lt;= total + "00000101"; -- adaugam moneda de 5 bani la total
          
    elsif F1 = '1' then
          next_state &lt;= S1;
          F4 &lt;= '1'; -- semnal de acceptare a monedei
          total &lt;= total + "00001010"; -- adaugam moneda de 10 bani la total
          
    elsif F2 = '1' then
      next_state &lt;= S1;
      F4 &lt;= '1'; -- semnal de acceptare a monedei
      total &lt;= total + "00110010"; -- adaugam moneda de 50 bani la total
      
    elsif F3 = '1' then
      next_state &lt;= S0; -- daca detectam o moneda neacceptata sau corp strain, revenim la starea initiala
      F4 &lt;= '0';
      
    else
      next_state &lt;= S0; -- asteptam sa primim o moneda
      
    end if;
    
  when S1 =&gt;
    if total &lt; price then
      AM &lt;= '1'; -- semnal de acceptare a monezilor
      F4 &lt;= '0'; -- resetam semnalul de acceptare a monedei
      next_state &lt;= S0; -- monedele sunt returnate
    
    else
      AM &lt;= '0'; -- nu mai acceptam monezi
      AT &lt;= '1'; -- semnal de total
      next_state &lt;= S2; -- trecem la starea urmatoare
    end if;
    
  when S2 =&gt;
    Coke &lt;= '1'; -- semnal de eliberare Coca Cola
    next_state &lt;= S3; -- trecem la starea urmatoare
    
  when S3 =&gt;
    Coke &lt;= '0'; -- resetam semnalul de eliberare Coca Cola
    AT &lt;= '0'; -- resetam semnalul de total
    total &lt;= (others =&gt; '0'); -- resetam totalul
    next_state &lt;= S0; -- revenim la starea initiala
    
end case;
end process;
&#13;
END TypeArchitecture;&#13;
</vhdl>
</project>
