<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <comp lib="0" loc="(1110,300)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="9"/>
    </comp>
    <comp lib="0" loc="(1130,320)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="9"/>
    </comp>
    <comp lib="0" loc="(320,260)" name="Clock"/>
    <comp lib="0" loc="(340,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(680,270)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(680,290)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(680,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(680,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(680,350)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(680,370)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(680,410)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="9"/>
    </comp>
    <comp lib="0" loc="(680,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="9"/>
    </comp>
    <comp lib="0" loc="(680,450)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="9"/>
    </comp>
    <comp lib="5" loc="(320,290)" name="Button"/>
    <comp lib="5" loc="(320,330)" name="Button"/>
    <comp lib="5" loc="(320,350)" name="Button"/>
    <comp lib="5" loc="(320,410)" name="Button"/>
    <comp loc="(1090,300)" name="SelfCascadingAdder">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(610,270)" name="ControlUnit">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(1090,300)" to="(1110,300)"/>
    <wire from="(1090,320)" to="(1130,320)"/>
    <wire from="(320,260)" to="(350,260)"/>
    <wire from="(320,290)" to="(390,290)"/>
    <wire from="(320,330)" to="(390,330)"/>
    <wire from="(320,350)" to="(390,350)"/>
    <wire from="(320,410)" to="(340,410)"/>
    <wire from="(340,310)" to="(390,310)"/>
    <wire from="(340,370)" to="(340,410)"/>
    <wire from="(340,370)" to="(390,370)"/>
    <wire from="(350,240)" to="(350,260)"/>
    <wire from="(350,240)" to="(800,240)"/>
    <wire from="(350,260)" to="(370,260)"/>
    <wire from="(370,260)" to="(370,270)"/>
    <wire from="(370,270)" to="(390,270)"/>
    <wire from="(390,350)" to="(400,350)"/>
    <wire from="(390,390)" to="(400,390)"/>
    <wire from="(400,440)" to="(400,450)"/>
    <wire from="(610,270)" to="(680,270)"/>
    <wire from="(610,290)" to="(680,290)"/>
    <wire from="(610,310)" to="(680,310)"/>
    <wire from="(610,330)" to="(680,330)"/>
    <wire from="(610,350)" to="(680,350)"/>
    <wire from="(610,370)" to="(680,370)"/>
    <wire from="(610,390)" to="(840,390)"/>
    <wire from="(610,410)" to="(680,410)"/>
    <wire from="(610,430)" to="(680,430)"/>
    <wire from="(610,450)" to="(680,450)"/>
    <wire from="(800,240)" to="(800,300)"/>
    <wire from="(800,300)" to="(870,300)"/>
    <wire from="(840,320)" to="(840,390)"/>
    <wire from="(840,320)" to="(870,320)"/>
  </circuit>
  <vhdl name="ControlUnit">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

ENTITY ControlUnit IS
  PORT (
 		Clk: in std_logic;
  		F0,F1,F2,F3, buton: in std_logic;
  		sumaINIT: in std_logic_vector (8 downto 0);
  		RM,FS,AT,Cola, SoldInsuficient, OS: out std_logic;
  		AM: out std_logic_vector(8 downto 0);
  		restOut: out std_logic_vector(8 downto 0);
  		sucuriRamase: out std_logic_vector(8 downto 0);
  		TOTAL: out std_logic_vector(8 downto 0)
  		);
END ControlUnit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE comportamentala OF ControlUnit IS

	
type STATE_T is (idle, decizie, verif_total, IM);
signal STATE, NXSTATE: STATE_T;
signal sucuri: std_logic_vector(8 downto 0) := "000000111";
signal rest: std_logic_vector(8 downto 0) := "000000000";
signal suma: std_logic_vector(8 downto 0) := "000000000";

BEGIN

UPDATE_STATE: process (Clk)
			begin
				if (rising_edge(ClK)) then
					STATE &lt;= NXSTATE;
					end if;
			end process UPDATE_STATE;
			

TRANSITIONS: process (STATE,  buton)--POATE SI IM
			begin
				case STATE is
					when idle =&gt; if sucuri="000000000" then FS&lt;='1'; NXSTATE&lt;=idle; 
					
								else NXSTATE &lt;= decizie; FS &lt;= '0';
								end if;
								
					when decizie =&gt; if buton='1' then NXSTATE &lt;= verif_total;
							   else NXSTATE &lt;= IM;
							   end if;

					when verif_total =&gt; NXSTATE &lt;= idle;
							   
					when IM =&gt; NXSTATE &lt;= decizie;
								 
				end case;
			end process;

					
Outputs: process (STATE, buton)
		begin
		-- initialization
		RM&lt;='0';FS&lt;='0';AT&lt;='0';Cola&lt;='0'; SoldInsuficient&lt;='0'; OS&lt;='0';
		
		case STATE is
					when idle =&gt; if(sucuri = "000000000") then FS&lt;= '1';
						end if;

					when decizie =&gt; null;
					
					when verif_total =&gt; if suma &gt; "001100100" then rest&lt;="000000000"; AT &lt;='1'; Cola &lt;= '1'; RM &lt;= '1';  rest &lt;= suma - "001100100";sucuri &lt;= sucuri - 1;  
								elsif (suma = "001100100") then rest &lt;="000000000"; AT &lt;= '1'; Cola &lt;= '1'; rest &lt;= suma - "001100100"; sucuri &lt;= sucuri - 1;   
								elsif(suma &lt; "001100100") then rest &lt;="000000000"; RM &lt;= '1'; SoldInsuficient&lt;='1';
								end if;
												
								
					when IM =&gt; if F0 = '1' then AM &lt;="000000101";
						   elsif F1 = '1' then AM &lt;="000001010"; 
						   elsif F2 = '1' then AM &lt;="000110010"; 
						   elsif F3 = '1' then OS &lt;= '1';
						   end if;
				end case;	
				
				TOTAL &lt;= suma;
				sucuriRamase &lt;= sucuri;
				restOut &lt;= rest;
		end process;	


END comportamentala;



library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

ENTITY sumator IS
  PORT (
  	clk: in std_logic;
  	a: IN std_logic_vector(8 DOWNTO 0);
  	b: IN std_logic_vector(8 DOWNTO 0);
  	sumaOut: out std_logic_vector(8 downto 0)
    );
END sumator;

ARCHITECTURE TypeArchitecture OF sumator IS

 begin
  
	process(clk)
	begin 
if(rising_edge(clk)) then
  sumaOut &lt;= a + b;
  end if;

  end process;


END TypeArchitecture;
</vhdl>
  <vhdl name="SelfCascadingAdder">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity SelfCascadingAdder is
    port (
     clk: in std_logic;
        A : in std_logic_vector(8 downto 0);
        totalOut: out std_logic_vector(8 downto 0);
        TOTAL : out std_logic_vector(8 downto 0)
    );
end entity SelfCascadingAdder;


architecture behavioral of SelfCascadingAdder is

component sumator is 
	  port (
     clk: in std_logic;
        A : in std_logic_vector(8 downto 0);
        B : in std_logic_vector(8 downto 0);
        TOTAL : out std_logic_vector(8 downto 0)
    );
   end component;

   signal  A1, B1, totalOut1, TOTAL1: std_logic_vector(8 downto 0);
   signal clk1: std_logic;
   
begin
	process(clk)
	begin
	U1: sumator port map(clk, A, "000000000", TOTAL1);
	U2: sumator port map(clk, A, TOTAL1, TOTAL);

end architecture behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity sumator is

	  port (
     clk: in std_logic;
        A : in std_logic_vector(8 downto 0);
        B : in std_logic_vector(8 downto 0);
        TOTAL : out std_logic_vector(8 downto 0)
    );

    end sumator;

architecture porting of sumator is

begin
	TOTAL &lt;= A+B;
end porting;</vhdl>
  <vhdl name="memorieRAM">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY memorieRAM IS&#13;
  PORT (&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
    clock      : IN  std_logic;                    -- input bit example&#13;
    val        : IN  std_logic_vector(3 DOWNTO 0); -- input vector example&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert output ports below&#13;
    max        : OUT std_logic;                    -- output bit example&#13;
    cpt        : OUT std_logic_vector(3 DOWNTO 0)  -- output vector example&#13;
    );&#13;
END memorieRAM;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF memorieRAM IS&#13;
&#13;
BEGIN&#13;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="testCOLA">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

ENTITY ControlUnit IS
  PORT (
 		Clk: in std_logic;
  		F0,F1,F2,F3, buton: in std_logic;
  		RM,FS,AM,AT,Cola, SoldInsuficient, OS: out std_logic;
  		restOut: out std_logic_vector(8 downto 0);
  		sucuriRamase: out std_logic_vector(8 downto 0);
  		TOTAL: out std_logic_vector(8 downto 0)
  		);
END ControlUnit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE comportamentala OF ControlUnit IS

	
type STATE_T is (idle, decizie, verif_total, IM);
signal STATE, NXSTATE: STATE_T;
signal sucuri: std_logic_vector(8 downto 0) := "000000000";
signal rest: std_logic_vector(8 downto 0) := "000000000";
signal suma: std_logic_vector(8 downto 0) := "000000000";

BEGIN

UPDATE_STATE: process (Clk)
			begin
				if (rising_edge(ClK)) then
					STATE &lt;= NXSTATE;
					end if;
			end process UPDATE_STATE;
			

TRANSITIONS: process (STATE,  buton)--POATE SI IM
			begin
				case STATE is
					when idle =&gt; if sucuri="000000000" then FS&lt;='1'; NXSTATE&lt;=idle; 
					
								else NXSTATE &lt;= decizie; FS &lt;= '0';
								end if;
								
					when decizie =&gt; if buton='1' then NXSTATE &lt;= verif_total;
							   else NXSTATE &lt;= IM;
							   end if;

					when verif_total =&gt; NXSTATE &lt;= idle;
							   
					when IM =&gt; NXSTATE &lt;= decizie;
								 
				end case;
			end process;

					
Outputs: process (STATE, buton)
		begin
		-- initialization
		RM&lt;='0';FS&lt;='0';AM&lt;='0';AT&lt;='0';Cola&lt;='0'; SoldInsuficient&lt;='0'; OS&lt;='0';
		
		case STATE is
					when idle =&gt; if(sucuri = "000000000") then FS&lt;= '1';
						end if;

					when decizie =&gt; null;
					
					when verif_total =&gt; if suma &gt; "001100100" then rest&lt;="000000000"; AT &lt;='1'; Cola &lt;= '1'; RM &lt;= '1';  rest &lt;= suma - "001100100";sucuri &lt;= sucuri - 1; suma &lt;= "000000000"; 
								elsif (suma = "001100100") then rest &lt;="000000000"; AT &lt;= '1'; Cola &lt;= '1'; rest &lt;= suma - "001100100"; sucuri &lt;= sucuri - 1; suma &lt;= "000000000";  
								elsif(suma &lt; "001100100") then rest &lt;="000000000"; RM &lt;= '1'; SoldInsuficient&lt;='1'; suma &lt;= "000000000";
								end if;
												
								
					when IM =&gt; if F0 = '1' then AM &lt;='1'; suma &lt;= suma + "000000101";
						   elsif F1 = '1' then AM &lt;='1'; suma &lt;= suma + "000001010";
						   elsif F2 = '1' then AM &lt;='1'; suma &lt;= suma + "000110010";
						   elsif F3 = '1' then OS &lt;= '1';
						   end if;
				end case;	

				TOTAL &lt;= suma;
				sucuriRamase &lt;= sucuri;
				restOut &lt;= rest;
		end process;	


END comportamentala;



library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

ENTITY sumator IS
  PORT (
  	a: IN std_logic_vector(8 DOWNTO 0);
  	b: IN std_logic_vector(8 DOWNTO 0);
  	sumaOut: out std_logic_vector(8 downto 0)
    );
END sumator;

ARCHITECTURE TypeArchitecture OF sumator IS

  begin

  sumaOut &lt;= a + b;


END TypeArchitecture;</vhdl>
</project>
